//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }


  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 10 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Done
      ///
      /// Key: common.done
      ///
      /// Locales: en
      var commonDone: RswiftResources.StringResource { .init(key: "common.done", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Ok
      ///
      /// Key: common.ok
      ///
      /// Locales: en
      var commonOk: RswiftResources.StringResource { .init(key: "common.ok", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Something went wrong
      ///
      /// Key: common.something.went.wrong
      ///
      /// Locales: en
      var commonSomethingWentWrong: RswiftResources.StringResource { .init(key: "common.something.went.wrong", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Warning
      ///
      /// Key: common.warning
      ///
      /// Locales: en
      var commonWarning: RswiftResources.StringResource { .init(key: "common.warning", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Details Page
      ///
      /// Key: image_detail.navigation.title
      ///
      /// Locales: en
      var image_detailNavigationTitle: RswiftResources.StringResource { .init(key: "image_detail.navigation.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Resolution
      ///
      /// Key: image_detail.resolution
      ///
      /// Locales: en
      var image_detailResolution: RswiftResources.StringResource { .init(key: "image_detail.resolution", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Favourite Images
      ///
      /// Key: image_favourite.navigation.title
      ///
      /// Locales: en
      var image_favouriteNavigationTitle: RswiftResources.StringResource { .init(key: "image_favourite.navigation.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Favourite
      ///
      /// Key: image_favourite.tabbar.title
      ///
      /// Locales: en
      var image_favouriteTabbarTitle: RswiftResources.StringResource { .init(key: "image_favourite.tabbar.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: All Images
      ///
      /// Key: image_list.navigation.title
      ///
      /// Locales: en
      var image_listNavigationTitle: RswiftResources.StringResource { .init(key: "image_list.navigation.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: All
      ///
      /// Key: image_list.tabbar.title
      ///
      /// Locales: en
      var image_listTabbarTitle: RswiftResources.StringResource { .init(key: "image_list.tabbar.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 8 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `Black`.
    var black: RswiftResources.ColorResource { .init(name: "Black", path: [], bundle: bundle) }

    /// Color `Green`.
    var green: RswiftResources.ColorResource { .init(name: "Green", path: [], bundle: bundle) }

    /// Color `Grey`.
    var grey: RswiftResources.ColorResource { .init(name: "Grey", path: [], bundle: bundle) }

    /// Color `Primary`.
    var primary: RswiftResources.ColorResource { .init(name: "Primary", path: [], bundle: bundle) }

    /// Color `SystemBlack`.
    var systemBlack: RswiftResources.ColorResource { .init(name: "SystemBlack", path: [], bundle: bundle) }

    /// Color `SystemWhite`.
    var systemWhite: RswiftResources.ColorResource { .init(name: "SystemWhite", path: [], bundle: bundle) }

    /// Color `White`.
    var white: RswiftResources.ColorResource { .init(name: "White", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 1 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `no_image.placeholder.ic`.
    var no_imagePlaceholderIc: RswiftResources.ImageResource { .init(name: "no_image.placeholder.ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `SplashViewController`.
    var splashViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SplashViewController", bundle: bundle) }

    func validate() throws {
      if UIKit.UIColor(named: "Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary' is used in nib 'SplashViewController', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIColor(named: "Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}